<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Leaflet Route Map with OSM Geocoding and Real-Time Location</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
    <style>
        * {
            padding: 0;
            margin: 0;
            box-sizing: border-box;
        }

        html,
        body {
            width: 100%;
            height: 100%;
        }

        /* Full page map container */
        #map {
            height: 100vh;
            width: 100%;
            position: relative;
        }

        /* Autocomplete suggestions */
        .autocomplete-suggestions {
            /* border: 1px solid #ddd; */
            max-height: 150px;
            overflow-y: auto;
            background-color: white;
        }

        .autocomplete-suggestion {
            border-bottom: 1px solid #ddd;
            /* Only bottom border */
            padding: 8px;
            cursor: pointer;

        }

        .autocomplete-suggestion:hover {
            background-color: #f0f0f0;
        }

        .leaflet-top+.leaflet-right {
            display: none;
        }

        /* Position the 'Use Current Location' button at the bottom right */
        #useCurrentLocation {
            position: absolute;
            bottom: 50px;
            right: 20px;
            width: 50px;
            /* Equal width and height */
            height: 50px;
            /* Equal width and height */
            border: none;
            background-color: rgb(255, 255, 255);
            border-radius: 50%;
            /* Makes the button round */
            cursor: pointer;
            z-index: 999;
            display: flex;
            align-items: center;
            justify-content: center;
            /* Centers the image within the button */
            padding: 0;
            box-shadow: 1px 2px 5px rgba(0, 0, 0, 0.3);
        }



        #inputs {
            background-color: white;
            width: 100vw;
            position: fixed;
            top: 0;
            left: 0;
            z-index: 1000;
            padding: 5px 10px;
        }

        .input-container {
        position: relative;
        width: 90%;
        max-width: 600px;
        margin: 0 auto;
    }

    #submitBtn {
        position: absolute;
        top: 50%;
        right: 0;
        transform: translateY(-50%);
        width: 60px;
        height: 40px;
        background-color: #007bff;
        border: none;
        border-radius: 0px 50px 50px 0;
        cursor: pointer;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 16px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }


        form {
            width: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        #end {
        padding: 8px;
        width: 100%;
        height: 40px; /* Adjusted height for a better fit */
        border-radius: 25px; /* Adjusted for smoother round edges */
        border: 1px solid #ddd;
        padding-right: 70px; /* Space for the button on the right */
    }

        .leaflet-control-container {
            display: none;
        }
    </style>

<body>

    <div id="inputs">
        <form method="post" action="/address/<%= userid %>">
            <div class="input-container">
                <input type="text" name="address" id="end" placeholder="Enter destination">
                <button type="submit" id="submitBtn">submit</button>
            </div>
            <div id="suggestions" class="autocomplete-suggestions"></div>
        </form>
    </div>

    <!-- Map container -->
    <div id="map"></div>
    <button type="button" id="useCurrentLocation">
        <img src="https://maps.gstatic.com/mapfiles/maps_lite/images/2x/gm_my_location_gm_blue_24dp.png"
            alt="Use Current Location" style="width: 24px; height: 24px;">
    </button>



    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>

    <script>
        let startLatLng, endLatLng;
        let userMarker;

        // Initialize the map
        const map = L.map('map').setView([20.5937, 78.9629], 5); // Centered on India as an example

        // Load and display the tile layer on the map
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
        }).addTo(map);

        // Track the user's location in real-time
        if (navigator.geolocation) {
            navigator.geolocation.watchPosition(position => {
                startLatLng = L.latLng(position.coords.latitude, position.coords.longitude);

                // Update the marker for the user's current location
                if (userMarker) {
                    userMarker.setLatLng(startLatLng).update();
                } else {
                    userMarker = L.marker(startLatLng).addTo(map)
                        .bindPopup("You are here").openPopup();
                }

                // Center the map on the new location
                map.setView(startLatLng, 13);
            }, error => {
                console.error("Error watching position:", error);
            }, {
                enableHighAccuracy: true,
                timeout: 30000,
                maximumAge: 0
            });
        } else {
            alert("Geolocation is not supported by this browser.");
        }

        // Set up the geocoder for destination input
        const endInput = document.getElementById('end');
        const suggestionsContainer = document.getElementById('suggestions');
        const geocoder = L.Control.Geocoder.nominatim();

        endInput.addEventListener('input', function () {
            geocoder.geocode(endInput.value, function (results) {
                suggestionsContainer.innerHTML = '';
                results.forEach(function (result) {
                    const suggestionItem = document.createElement('div');
                    suggestionItem.className = 'autocomplete-suggestion';
                    suggestionItem.innerText = result.name;
                    suggestionItem.addEventListener('click', function () {
                        endInput.value = result.name;
                        endLatLng = result.center;
                        suggestionsContainer.innerHTML = ''; // Clear suggestions
                        generateRoute();
                    });
                    suggestionsContainer.appendChild(suggestionItem);
                });
            });
        });

        // Use current location as start address
        document.getElementById('useCurrentLocation').addEventListener('click', function () {
            if (startLatLng) {
                // Reverse geocode the user's current location
                geocoder.reverse(startLatLng, map.options.crs.scale(map.getZoom()), function (results) {
                    if (results.length > 0) {
                        endLatLng = startLatLng; // Set end location to user's current location
                        endInput.value = results[0].name; // Set the input field to the actual address
                        generateRoute();
                    } else {
                        alert("Address not found for your current location.");
                    }
                });
            } else {
                alert("Current location not available yet. Please wait or check your location permissions.");
            }
        });

        // Function to generate a route between two locations
        function generateRoute() {
            if (!startLatLng || !endLatLng) {
                alert("Please select valid locations.");
                return;
            }

            // Remove any existing routing control
            if (window.routingControl) {
                map.removeControl(window.routingControl);
            }

            // Add the new routing control with the specified waypoints
            window.routingControl = L.Routing.control({
                waypoints: [
                    startLatLng,
                    endLatLng
                ],
                routeWhileDragging: true,
            }).addTo(map);
        }
    </script>

</body>

</html>